animate.cpp executes a program that allows the user to play a game using a "spaceship" and two randomly moving circles.  The user uses the arrows to control the spaceship and has to avoid hitting the circles.  If the user hits one of the circles the game ends and the window closes.

The code for this program starts out by initializing a bunch of variables, including the size of the window, the initial velocity and angle, the size of the spaceship, the intial dx and dy of both circles, and the inital position of the circles.  I used srand and rand to generate the dx and dy and positions so that the circles are not traveling in any type of pattern.  The program opens a window and then enters a while loop, which is not exited until the user presses q or the user runs into a circle.  In the while loop, the screen is cleared, then text is displayed in the top right with instructions, then the first circle is drawn then the second circle and then the ship, all depending upon the variable input of the locations.  then the graphics are flushed to the screen and the xposition is increased using a sin function and the y position is increased using a cos function.  The positions of the circles are updated according to the randomly found dx and dy values, then a function called new_circle is called, which checks to see if the position of the circle is at the edge of the screen and if so, it generates a new circle with dx and dy !=0.  The program then calls a function called check_collisions that checks to see if the spaceship has run into the circles by comparing the position of the spaceship with the positions of the circles.  The program then takes an input from the user using gfx_event_waiting() and gfx_wait() to get an input and then goes into a switch case to determine what to do.  after that, the program calls bounds, which is a function that makes the spaceship never go off the screen, in other words it resets the position if it goes off the edge of the window.

I checked this program by playing around with the spaceship, speeding up, slowing down, turning left and right, and trying to intersect with a circle to see if it does shut the program down.
